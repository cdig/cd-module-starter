// Generated by CoffeeScript 1.8.0
(function() {
  var easeInOutCubic, linearTween;

  window.addEventListener("gameover", function() {
    var congrats;
    congrats = document.querySelector(".congrats");
    return congrats.style.opacity = "1.0";
  });

  (function() {
    var audioEnabled, context, currentPageName, decodeFailure, loadAudioForCurrentPage, request, requestPending, setBuffer, source, stopAudio;
    audioEnabled = false;
    currentPageName = null;
    requestPending = false;
    context = new (this.AudioContext || this.webkitAudioContext)();
    source = null;
    request = new XMLHttpRequest();
    request.responseType = "arraybuffer";
    request.addEventListener("load", function() {
      requestPending = false;
      return context.decodeAudioData(request.response, setBuffer, decodeFailure);
    });
    this.addEventListener("disableAudio", function(e) {
      if (audioEnabled) {
        audioEnabled = false;
        if (requestPending) {
          request.abort();
        }
        if (source != null) {
          return source.stop(0);
        }
      }
    });
    this.addEventListener("enableAudio", function(e) {
      if (!audioEnabled) {
        audioEnabled = true;
        return loadAudioForCurrentPage();
      }
    });
    this.addEventListener("pageChange", function(e) {
      currentPageName = e.detail.page.id;
      return loadAudioForCurrentPage();
    });
    loadAudioForCurrentPage = function() {
      if ((currentPageName != null) && audioEnabled) {
        if (requestPending) {
          request.abort();
        }
        request.open("GET", "audio/" + currentPageName + ".mp3", true);
        requestPending = true;
        return request.send();
      }
    };
    setBuffer = function(buffer) {
      stopAudio();
      source = context.createBufferSource();
      source.connect(context.destination);
      source.buffer = buffer;
      return source.start(0);
    };
    decodeFailure = function(e) {
      return "Error with decoding audio data" + e.err;
    };
    return stopAudio = function() {
      try {
        if (source != null) {
          return source.stop(0);
        }
      } catch (_error) {}
    };
  })();

  easeInOutCubic = (function(_this) {
    return function(t, b, c, d) {
      t /= d / 2;
      if (t < 1) {
        return c / 2 * t * t * t + b;
      }
      t -= 2;
      return c / 2 * (t * t * t + 2) + b;
    };
  })(this);

  linearTween = function(t, b, c, d) {
    var value;
    value = c * t / d + b;
    console.log("value is " + value);
    return value;
  };

  (function() {
    var PAGE_SELECTOR, SCROLL_ANIMATION_SPEED, activateNavbarButton, deactivateNavbarButton, dispatchPageChangeEvent, lastCurrentPageIndex, makeNavbarButton, navbarButtons, newCurrentPage, pageIsCurrent, pages, scrollTo, setupNavbar, setupPages, setupScrolling, updateScroll;
    PAGE_SELECTOR = "page";
    SCROLL_ANIMATION_SPEED = 500;
    pages = null;
    navbarButtons = [];
    lastCurrentPageIndex = null;
    this.addEventListener("load", function() {
      setupPages();
      setupNavbar();
      return setupScrolling();
    });
    setupPages = function() {
      return pages = document.querySelectorAll(PAGE_SELECTOR);
    };
    setupNavbar = function() {
      var navbar, navbarButton, page, pageIndex, _i, _len;
      navbar = document.createElement("div");
      navbar.classList.add("navbar");
      for (pageIndex = _i = 0, _len = pages.length; _i < _len; pageIndex = ++_i) {
        page = pages[pageIndex];
        navbarButton = makeNavbarButton(page, pageIndex);
        navbarButtons.push(navbarButton);
        navbar.appendChild(navbarButton);
      }
      return document.body.appendChild(navbar);
    };
    makeNavbarButton = function(page, pageIndex) {
      var navbarButton;
      navbarButton = document.createElement("div");
      navbarButton.classList.add("pageButton");
      navbarButton.textContent = page.id.replace(/-/g, " ");
      navbarButton.addEventListener("click", function() {
        var pageTop, scrollPosition;
        scrollPosition = document.body.scrollTop;
        pageTop = page.offsetTop;
        return scrollTo(scrollPosition, pageTop - scrollPosition);
      });
      return navbarButton;
    };
    setupScrolling = function() {
      this.addEventListener("scroll", updateScroll);
      return updateScroll();
    };
    updateScroll = function() {
      var page, pageIndex, _i, _len, _results;
      _results = [];
      for (pageIndex = _i = 0, _len = pages.length; _i < _len; pageIndex = ++_i) {
        page = pages[pageIndex];
        if (pageIsCurrent(page)) {
          if (pageIndex !== lastCurrentPageIndex) {
            newCurrentPage(page, pageIndex);
            break;
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    pageIsCurrent = function(page) {
      var pageBottom, pageTop, scrollOffset;
      pageTop = page.offsetTop;
      pageBottom = page.offsetTop + page.offsetHeight;
      scrollOffset = this.pageYOffset + document.body.clientHeight / 2;
      return scrollOffset > pageTop && scrollOffset < pageBottom;
    };
    newCurrentPage = function(page, pageIndex) {
      if (lastCurrentPageIndex != null) {
        deactivateNavbarButton(lastCurrentPageIndex);
      }
      lastCurrentPageIndex = pageIndex;
      dispatchPageChangeEvent(page, pageIndex);
      return activateNavbarButton(pageIndex);
    };
    activateNavbarButton = function(index) {
      return navbarButtons[index].classList.add("current");
    };
    deactivateNavbarButton = function(index) {
      return navbarButtons[index].classList.remove("current");
    };
    dispatchPageChangeEvent = function(page, pageIndex) {
      return this.dispatchEvent(new CustomEvent("pageChange", {
        detail: {
          page: page,
          pageIndex: pageIndex
        }
      }));
    };
    return scrollTo = function(startHeight, heightDiff) {
      var animate, currentTime, duration, startTime;
      if (heightDiff === 0) {
        return;
      }
      startTime = null;
      currentTime = 0;
      duration = Math.sqrt(Math.abs(heightDiff * SCROLL_ANIMATION_SPEED));
      animate = function(systemTime) {
        var height;
        if (startTime == null) {
          startTime = systemTime;
        }
        currentTime = systemTime - startTime;
        if (currentTime > duration) {
          currentTime = duration;
        }
        height = easeInOutCubic(currentTime, startHeight, heightDiff, duration);
        document.body.scrollTop = height;
        if (currentTime < duration) {
          return requestAnimationFrame(animate);
        }
      };
      return requestAnimationFrame(animate);
    };
  })();

}).call(this);
