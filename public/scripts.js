// Generated by CoffeeScript 1.8.0
(function() {
  var loadScrollRegions, loadSideBar;

  (function() {
    var audioEnabled, context, currentPageName, decodeFailure, loadAudioForCurrentPage, request, requestPending, setBuffer, source, stopAudio;
    audioEnabled = false;
    currentPageName = null;
    requestPending = false;
    context = new (this.AudioContext || this.webkitAudioContext)();
    source = null;
    request = new XMLHttpRequest();
    request.responseType = "arraybuffer";
    request.addEventListener("load", function() {
      requestPending = false;
      return context.decodeAudioData(request.response, setBuffer, decodeFailure);
    });
    this.addEventListener("disableAudio", function(e) {
      if (audioEnabled) {
        audioEnabled = false;
        if (requestPending) {
          request.abort();
        }
        if (source != null) {
          return source.stop(0);
        }
      }
    });
    this.addEventListener("enableAudio", function(e) {
      if (!audioEnabled) {
        audioEnabled = true;
        return loadAudioForCurrentPage();
      }
    });
    this.addEventListener("pageChange", function(e) {
      currentPageName = e.detail.page.id;
      return loadAudioForCurrentPage();
    });
    loadAudioForCurrentPage = function() {
      if ((currentPageName != null) && audioEnabled) {
        if (requestPending) {
          request.abort();
        }
        request.open("GET", "audio/" + currentPageName + ".mp3", true);
        requestPending = true;
        return request.send();
      }
    };
    setBuffer = function(buffer) {
      stopAudio();
      source = context.createBufferSource();
      source.connect(context.destination);
      source.buffer = buffer;
      return source.start(0);
    };
    decodeFailure = function(e) {
      return "Error with decoding audio data" + e.err;
    };
    return stopAudio = function() {
      try {
        if (source != null) {
          return source.stop(0);
        }
      } catch (_error) {}
    };
  })();

  loadScrollRegions = function() {
    var handleScrollAreas, handleScrollBody, scrollAreas, scrollEnd, scrollEnds, scrollStart, scrollStarts, scrollVal, scrollValEnd, _i, _j, _len, _len1;
    scrollStarts = document.querySelectorAll('[scrollStart]');
    scrollEnds = document.querySelectorAll('[scrollEnd]');
    scrollAreas = [];
    for (_i = 0, _len = scrollStarts.length; _i < _len; _i++) {
      scrollStart = scrollStarts[_i];
      scrollVal = scrollStart.getAttribute('scrollStart');
      for (_j = 0, _len1 = scrollEnds.length; _j < _len1; _j++) {
        scrollEnd = scrollEnds[_j];
        scrollValEnd = scrollEnd.getAttribute('scrollEnd');
        if (scrollVal === scrollValEnd) {
          scrollAreas.push({
            start: scrollStart,
            stop: scrollEnd
          });
        }
      }
    }
    console.log(scrollAreas);
    handleScrollAreas = function() {
      var event, scrollArea, scrollAreaBottom, scrollAreaTop, scrollTop, value, _k, _len2, _results;
      scrollTop = document.body.scrollTop;
      _results = [];
      for (_k = 0, _len2 = scrollAreas.length; _k < _len2; _k++) {
        scrollArea = scrollAreas[_k];
        scrollAreaTop = scrollArea.start.offsetTop;
        scrollAreaBottom = scrollArea.stop.offsetTop;
        if (scrollTop > scrollAreaTop && scrollTop <= scrollAreaBottom) {
          value = (scrollTop - scrollAreaTop) / (scrollAreaBottom - scrollAreaTop);
          event = new CustomEvent("scrollPercentage", {
            "detail": {
              "value": value
            }
          });
          _results.push(scrollArea.start.dispatchEvent(event));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    handleScrollBody = function() {
      var event, scrollAreaBottom, scrollAreaTop, scrollTop, value;
      scrollAreaTop = document.body.offsetTop;
      scrollAreaBottom = document.body.offsetTop + document.body.scrollHeight - document.body.offsetHeight;
      scrollTop = document.body.scrollTop;
      value = (scrollTop - scrollAreaTop) / (scrollAreaBottom - scrollAreaTop);
      event = new CustomEvent("scrollPercentage", {
        "detail": {
          "value": value
        }
      });
      return document.body.dispatchEvent(event);
    };
    window.addEventListener("scroll", handleScrollAreas);
    return window.addEventListener("scroll", handleScrollBody);
  };

  window.addEventListener("load", loadScrollRegions);

  loadSideBar = function() {
    var elemDiv, navButtons, page, pages, scrollTo, scrollToAnimate, sidebarScroll, testFunc, _i, _len;
    pages = document.querySelectorAll('[page]');
    navButtons = [];
    elemDiv = document.createElement('div');
    elemDiv.className = "sidebar";
    for (_i = 0, _len = pages.length; _i < _len; _i++) {
      page = pages[_i];
      testFunc = (function(_this) {
        return function(pag) {
          var newDiv, pageNum;
          pageNum = pag.getAttribute('page');
          newDiv = document.createElement('div');
          newDiv.className = "navButton";
          navButtons.push(newDiv);
          elemDiv.appendChild(newDiv);
          return newDiv.onclick = function() {
            var element, y;
            element = document.querySelector('[page="' + pageNum + '"]');
            y = element.offsetTop;
            console.log(y);
            return scrollTo(document.body, document.body.scrollTop, y - document.body.scrollTop, 2000);
          };
        };
      })(this);
      testFunc(page);
    }
    sidebarScroll = function() {
      var elBottom, elTop, element, i, navButton, pageNum, scrollOffset, _j, _ref;
      for (i = _j = 0, _ref = pages.length - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
        page = pages[i];
        navButton = navButtons[i];
        pageNum = page.getAttribute('page');
        element = document.querySelector('[page="' + pageNum + '"]');
        elTop = element.offsetTop;
        elBottom = element.offsetTop + element.offsetHeight;
        scrollOffset = window.pageYOffset + document.body.clientHeight / 2;
        if (scrollOffset > elTop && scrollOffset < elBottom) {
          navButton.style.background = "red";
        } else {
          navButton.style.background = "blue";
        }
      }
      return console.log("scrollin' " + window.pageYOffset);
    };
    scrollToAnimate = (function(_this) {
      return function(element, to, duration) {
        var difference, perTick;
        if (duration <= 0) {
          console.log("we done2");
          return;
        }
        difference = to - element.scrollTop;
        perTick = difference / duration * 10;
        return setTimeout(function() {
          element.scrollTop = element.scrollTop + perTick;
          if (element.scrollTop === to) {
            console.log("we done");
            return;
          }
          return scrollToAnimate(element, to, duration - 10);
        }, 10);
      };
    })(this);
    scrollTo = function(element, startHeight, heightDiff, duration) {
      var cTime, requestID, scrollFunc, startTime;
      startTime = null;
      cTime = 0;
      scrollFunc = (function(_this) {
        return function(time) {
          var height;
          console.log("sup");
          if (startTime === null) {
            startTime = time;
          }
          cTime = time - startTime;
          if (cTime > duration) {
            cTime = duration;
          }
          height = easeInOutCubic(cTime, startHeight, heightDiff, duration);
          element.scrollTop = height;
          if (cTime < duration) {
            return requestAnimationFrame(scrollFunc);
          }
        };
      })(this);
      return requestID = requestAnimationFrame(scrollFunc);
    };
    document.body.appendChild(elemDiv);
    window.addEventListener("scroll", sidebarScroll, false);
    return sidebarScroll();
  };

  window.addEventListener("load", loadSideBar);

  (function() {
    var PAGE_SELECTOR, SCROLL_ANIMATION_SPEED, activateNavbarButton, deactivateNavbarButton, dispatchPageChangeEvent, easeInOutCubic, lastCurrentPageIndex, makeNavbarButton, navbarButtons, newCurrentPage, pageIsCurrent, pages, scrollTo, setupNavbar, setupPages, setupScrolling, updateScroll;
    PAGE_SELECTOR = "cd-page";
    SCROLL_ANIMATION_SPEED = 500;
    pages = null;
    navbarButtons = [];
    lastCurrentPageIndex = null;
    this.addEventListener("load", function() {
      setupPages();
      setupNavbar();
      return setupScrolling();
    });
    setupPages = function() {
      return pages = document.querySelectorAll(PAGE_SELECTOR);
    };
    setupNavbar = function() {
      var navbar, navbarButton, page, pageIndex, _i, _len;
      navbar = document.createElement("div");
      navbar.classList.add("navbar");
      for (pageIndex = _i = 0, _len = pages.length; _i < _len; pageIndex = ++_i) {
        page = pages[pageIndex];
        navbarButton = makeNavbarButton(page, pageIndex);
        navbarButtons.push(navbarButton);
        navbar.appendChild(navbarButton);
      }
      return document.body.appendChild(navbar);
    };
    makeNavbarButton = function(page, pageIndex) {
      var navbarButton;
      navbarButton = document.createElement("div");
      navbarButton.classList.add("pageButton");
      navbarButton.textContent = page.id.replace(/-/g, " ");
      navbarButton.addEventListener("click", function() {
        var pageTop, scrollPosition;
        scrollPosition = document.body.scrollTop;
        pageTop = page.offsetTop;
        return scrollTo(scrollPosition, pageTop - scrollPosition);
      });
      return navbarButton;
    };
    setupScrolling = function() {
      this.addEventListener("scroll", updateScroll);
      return updateScroll();
    };
    updateScroll = function() {
      var page, pageIndex, _i, _len, _results;
      _results = [];
      for (pageIndex = _i = 0, _len = pages.length; _i < _len; pageIndex = ++_i) {
        page = pages[pageIndex];
        if (pageIsCurrent(page)) {
          if (pageIndex !== lastCurrentPageIndex) {
            newCurrentPage(page, pageIndex);
            break;
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    pageIsCurrent = function(page) {
      var pageBottom, pageTop, scrollOffset;
      pageTop = page.offsetTop;
      pageBottom = page.offsetTop + page.offsetHeight;
      scrollOffset = this.pageYOffset + document.body.clientHeight / 2;
      return scrollOffset > pageTop && scrollOffset < pageBottom;
    };
    newCurrentPage = function(page, pageIndex) {
      if (lastCurrentPageIndex != null) {
        deactivateNavbarButton(lastCurrentPageIndex);
      }
      lastCurrentPageIndex = pageIndex;
      dispatchPageChangeEvent(page, pageIndex);
      return activateNavbarButton(pageIndex);
    };
    activateNavbarButton = function(index) {
      return navbarButtons[index].classList.add("current");
    };
    deactivateNavbarButton = function(index) {
      return navbarButtons[index].classList.remove("current");
    };
    dispatchPageChangeEvent = function(page, pageIndex) {
      return this.dispatchEvent(new CustomEvent("pageChange", {
        detail: {
          page: page,
          pageIndex: pageIndex
        }
      }));
    };
    easeInOutCubic = function(t, b, c, d) {
      t /= d / 2;
      if (t < 1) {
        return c / 2 * t * t * t + b;
      } else {
        t -= 2;
        return c / 2 * (t * t * t + 2) + b;
      }
    };
    return scrollTo = function(startHeight, heightDiff) {
      var animate, currentTime, duration, startTime;
      if (heightDiff === 0) {
        return;
      }
      startTime = null;
      currentTime = 0;
      duration = Math.sqrt(Math.abs(heightDiff * SCROLL_ANIMATION_SPEED));
      animate = function(systemTime) {
        var height;
        if (startTime == null) {
          startTime = systemTime;
        }
        currentTime = systemTime - startTime;
        if (currentTime > duration) {
          currentTime = duration;
        }
        height = easeInOutCubic(currentTime, startHeight, heightDiff, duration);
        document.body.scrollTop = height;
        if (currentTime < duration) {
          return requestAnimationFrame(animate);
        }
      };
      return requestAnimationFrame(animate);
    };
  })();

  (function() {
    return this.addEventListener("load", function() {});
  })();

}).call(this);
